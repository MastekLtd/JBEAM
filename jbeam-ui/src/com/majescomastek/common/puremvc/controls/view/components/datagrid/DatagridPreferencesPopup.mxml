<?xml version="1.0" encoding="utf-8"?>
<!--
 * Copyright (c) 2014 Mastek Ltd. All rights reserved.
 * 
 * This file is part of JBEAM. JBEAM is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation.
 *
 * JBEAM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
 * Public License for the specific language governing permissions and 
 * limitations.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with JBEAM. If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Sandeep A
 *
 * $Revision:: 2                                                                                                       $
 *	
 * $Header:: /Product_Base/Projects/Billing-UI/FLEX UI DEV/src/com/majescomastek/common/puremvc/controls/view/compon $	
 *
 * $Log:: /Product_Base/Projects/Billing-UI/FLEX UI DEV/src/com/majescomastek/common/puremvc/controls/view/compon $
 * 
 * 2     3/18/10 9:11a Sanjay.sharma
 * Updated DataGridPreferencesPopup
 * 
 * 1     3/05/10 4:27p Sanjay.sharma
 * Initial commit of base flex controls and advanced datagrid control
 * 
 * 3     3/04/10 5:19p Sanjay.sharma
 * Added the functionality of resetting to default
 * 
 * 2     3/04/10 2:35p Sandeepa
 * commented the alert
 * 
 * 1     3/03/10 4:24p Sandeepa
 * to work with Custom datagrid
 * 
 * 
-->
<containers:BaseTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="300" verticalGap="5"
	styleName="popupWindowBox" title="Change Datagrid Settings" showCloseButton="true" close="sendEvent(CLEANUP);" 
	xmlns:datagrid="com.majescomastek.common.puremvc.controls.view.components.datagrid.*"
	xmlns:controls="com.majescomastek.common.controls.framework.*"
	xmlns:containers="com.majescomastek.common.containers.framework.*">
	<mx:Script>
		<![CDATA[
			import com.majescomastek.jbeam.model.vo.DatagridPreference;
			import com.majescomastek.common.puremvc.controls.model.screenvo.DatagridPreferencesPopupScreenVO;
			import com.majescomastek.common.controls.framework.BaseDataGrid;
			import com.majescomastek.jbeam.model.vo.DatagridPreference;
			import com.majescomastek.jbeam.common.AlertBuilder;
			import com.majescomastek.jbeam.model.vo.BaseValueObject;
			import flash.net.registerClassAlias;
			import mx.controls.DataGrid;
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.managers.PopUpManager;
			
			include "../../../../../../jbeam/common/CommonScript.as"
			
			/** The event constant used to denote the request for the saving of datagrid preferences */
			public static const SAVE_PREFERENCE_CLICK:String = 'SAVE_PREFERENCE_CLICK';
			
			/** The event constant used to denote the request for the cleanup of this module */
			public static const CLEANUP:String = 'CLEANUP_DATAGRID_PREFERENCES_POPUP';
			
			/**
			 * The event constant used to denote the request for the retrieving of
			 * default datagrid preferences
			 */
			public static const USE_DEFAULT_CLICK:String = "USE_DEFAULT_CLICK";
			
			private var _columnsList:Array;
			
			[Bindable]
    		[Inspectable(category="General", defaultValue="")]
			public function get columnsList():Array
			{
				return this._columnsList;
			}
			
			public function set columnsList(value:Array):void
			{
				this._columnsList = value;
			}
			
			private var _datagridPreferencesVO:DatagridPreferencesPopupScreenVO;
			
			[Bindable]
    		[Inspectable(category="General", defaultValue="")]
			public function get datagridPreferencesVO():DatagridPreferencesPopupScreenVO
			{
				return this._datagridPreferencesVO;
			}
			
			public function set datagridPreferencesVO(value:DatagridPreferencesPopupScreenVO):void
			{
				this._datagridPreferencesVO = value;
				targetDataGrid = datagridPreferencesVO.targetDatagrid;
				columnsList = targetDataGrid.columns;
			}
			
			
			private var _targetDataGrid:BaseDataGrid;
			
			[Bindable]
    		[Inspectable(category="General", defaultValue="")]
			public function get targetDataGrid():BaseDataGrid
			{
				return this._targetDataGrid;
			}
			public function set targetDataGrid(value:BaseDataGrid):void
			{
				this._targetDataGrid = value;
			}
			
			private var _hiddenColumnIds:ArrayCollection
			
			[Bindable]
    		[Inspectable(category="General", defaultValue="")]
			public function get hiddenColumnIds():ArrayCollection
			{
				return this._hiddenColumnIds;
			}
			public function set hiddenColumnIds(value:ArrayCollection):void
			{
				this._hiddenColumnIds = value;
			}
			
			
			private function onSubmitClick():void
			{
				var some:ArrayCollection = lstColumnsList.dataProvider as ArrayCollection;
				targetDataGrid.columns = lstColumnsList.dataProvider.toArray();
			}
			
			/**
			 * Handle the success of the datagrid preference retrieval
			 */
			public function handleRetrievalSuccess(body:Object):void
			{
				if(body == null)	return;
				
				// Move this part in a Command and from the command send a notification
				// which contains the arraycollection as notification data.
				var preference:DatagridPreference = DatagridPreference(body);
				var xml:XML = new XML(preference.datagridColumns);
				var array:Array = [];
				for each(var column:XML in xml.column)
				{
					array.push(column);
				}
				hiddenColumnIds = new ArrayCollection(array);
			}
			
			/**
			 * Handle the success of the datagrid preference persistence
			 */
			public function handleSaveSuccess(body:Object):void
			{
				sendEvent(CLEANUP);
			}
			
			/**
			 * Handle the success of the datagrid preference retrieval
			 */
			public function handleRetrieveSuccess(body:Object):void
			{
				sendEvent(CLEANUP);
			}
			
			private function alertCloseHandler(event:Event):void
			{
				sendEvent(CLEANUP);		
			}
			/**
			 * The function invoked when the save button is clicked.
			 */
			private function saveClickHandler(event:Event):void
			{
				onSubmitClick();
				 var data:Object = {
					'columnIds': lstColumnsList.columnIds,
					'datagridName': _datagridPreferencesVO.dataGridId,
					'screenName': _datagridPreferencesVO.screenName
				}; 
				sendDataEvent(SAVE_PREFERENCE_CLICK, data);
			}
			
			/**
			 * The function invoked when the 'Use Default' button is clicked.
			 */
			private function useDefaultClickHandler(event:Event):void
			{
				var data:Object = {
					'datagridName': _datagridPreferencesVO.dataGridId,
					'screenName': _datagridPreferencesVO.screenName,
					'retrieveDefault': true
				};
				sendDataEvent(USE_DEFAULT_CLICK, data);
			}		
		]]>
	</mx:Script>

	<datagrid:CustomList id="lstColumnsList" width="100%" height="200" targetDataGrid="{targetDataGrid}"
				dataProvider="{targetDataGrid.columns}" >
	</datagrid:CustomList>	
	<containers:BaseCanvas width="100%">
		<controls:BaseButton right="0" styleName="mainButton" label="Save Preferences" click="saveClickHandler(event);"/>
		<controls:BaseButton label="Use Default" left="0" click="useDefaultClickHandler(event)" />
	</containers:BaseCanvas>

</containers:BaseTitleWindow>