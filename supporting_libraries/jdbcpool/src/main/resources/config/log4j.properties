#!-----------------------------------------------------------------------------#!
#! $Revision: 4 $                                                              #!
#!-----------------------------------------------------------------------------#!

#!-----------------------------------------------------------------------------#!
#! Configure log4j's operation at the meta level                               #!
#! Remember these are to be set at the command line e.g. -Dlog4j.debug=true    #!
#! in startEng.sh                                                              #!
#!-----------------------------------------------------------------------------#!
#! Observe log4j parsing this file
#log4j.debug=true
#! Set this to false for log4j to actually obey the log4j.disable property(next)
#log4j.disableOverride=false
#! Disable all logging in all categories for messages with priority equal to
#! or lower than the one given here
#log4j.disable=INFO



#!-----------------------------------------------------------------------------#!
#! Configure Loggers                                                           #!
#!-----------------------------------------------------------------------------#!

#! ROOT LOGGER (Usually sufficient to set this one only)
#! Here, logs messages with priority DEBUG (default) or higher
log4j.rootLogger=DEBUG, ConsoleLogger, FileLogger

#! YOUR CATEGORIES (to customize logging per class/pkg/project/etc)
#! Here, overrides ancestor's priority and makes it WARN or higher for this cat.
log4j.logger.JDBC=DEBUG, JDBCFileLogger

#!--------DON'T DO THIS#!#!#!  APPENDERS ARE ADDITIVE BY DEFAULT#!#!#!---------------#!
#! It will write the same log message TWICE to dest1. Once for root, then for  #!
#! this category.                                                              #!
#!#log4j.category.JDBC=DEBUG, ConsoleLogger, JDBCFileLogger                    #!
#! If you DO NOT want additivity for this category, say so                     #!
#!#log4j.additivity.JDBC=false                                                 #!
#!-----------------------------------------------------------------------------#!

#!-----------------------------------------------------------------------------#!
#! Configure appenders (log destinations/targets) and their options            #!
#!-----------------------------------------------------------------------------#!

#! WRITE TO CONSOLE (stdout or stderr)
log4j.appender.ConsoleLogger=org.apache.log4j.ConsoleAppender
log4j.appender.ConsoleLogger.ImmediateFlush=true
log4j.appender.ConsoleLogger.Threshold=ALL

#! WRITE LOG TO A FILE, ROLL THE FILE AFTER SOME SIZE
log4j.appender.FileLogger=org.apache.log4j.DailyRollingFileAppender

#! This appender will only log messages with priority equal to or higher than
#! the one specified here
log4j.appender.FileLogger.Threshold=ALL

#! Specify the file name (${property_key} gets substituted with its value)
#log4j.appender.FileLogger.File=${java.home}/log4j.log
log4j.appender.FileLogger.File=${jdbc.home}/logs/jdbcpool.log

#! Don't append, overwrite
#log4j.appender.FileLogger.Append=false
#! Control the maximum log file size
#log4j.appender.FileLogger.MaxFileSize=1MB

#! Keep backup file(s) (backups will be in filename.1, .2 etc.)
#log4j.appender.FileLogger.MaxBackupIndex=20

#! WRITE LOG TO A FILE, ROLL THE FILE EVERY WEEK
log4j.appender.JDBCFileLogger=org.apache.log4j.DailyRollingFileAppender

#! Specify the file name
log4j.appender.JDBCFileLogger.File=${jdbc.home}/logs/jdbcwarn.log

#! Control the maximum log file size
#log4j.appender.JDBCFileLogger.MaxFileSize=1MB
#! Rollover log file at the start of each week
log4j.appender.FileLogger.DatePattern='.'yyyyMMdda
log4j.appender.JDBCFileLogger.DatePattern='.'yyyyMMdda



#!-----------------------------------------------------------------------------#!
#! Configure appender layouts (log formats) and their options                  #!
#!-----------------------------------------------------------------------------#!

#! USE SIMPLE LOG FORMAT (e.g. INFO - your log message)
#log4j.appender.ConsoleLogger.layout=org.apache.log4j.SimpleLayout

#! USE A C PRINTF STYLE PATTERN TO FORMAT LOG MESSAGE
log4j.appender.ConsoleLogger.layout=org.apache.log4j.PatternLayout
#! For a pattern layout, specify the pattern (Default is %m%n which is fastest)
log4j.appender.ConsoleLogger.layout.ConversionPattern=<%d{EEE MMM dd, yyyy HH:mm:ss:SSS}><%p><%t><%c>%m%n

log4j.appender.FileLogger.layout=org.apache.log4j.PatternLayout
log4j.appender.FileLogger.layout.ConversionPattern=<%d{EEE MMM dd, yyyy HH:mm:ss:SSS}><%p><%t><%c>%m%n
#! Or, (the pattern below will slow down your app)
#log4j.appender.FileLogger.layout.ConversionPattern=[%d{yyyy-mm-dd hh:mm},%6.6r]%-5p[%t]%x(%F:%L) - %m%n


#! FORMAT LOG MESSAGES IN THE FORM OF AN HTML TABLE
#log4j.appender.JDBCFileLogger.layout=org.apache.log4j.HTMLLayout
#! Include Java file name and line number (Default is false)
#log4j.appender.JDBCFileLogger.layout.LocationInfo=true
#! Set <title> tag (Default: Log4J Log Messages)
#log4j.appender.JDBCFileLogger.layout.Title=Process Request Engine
#!-----------------------------------------------------------------------------#!
#! BUT WE WILL NOT USE THE HTML FORM BUT USE WHAT WE ARE USING FOR FileLogger
#!-----------------------------------------------------------------------------#!
log4j.appender.JDBCFileLogger.layout=org.apache.log4j.PatternLayout
log4j.appender.JDBCFileLogger.layout.ConversionPattern=<%d{EEE MMM dd, yyyy HH:mm:ss:SSS}><%p><%t><%c>%m%n
#! Or, (the pattern below will slow down your app)
#log4j.appender.JDBCFileLogger.layout.ConversionPattern=[%d{yyyy-mm-dd hh:mm},%6.6r]%-5p[%t]%x(%F:%L) - %m%n




#!-----------------------------------------------------------------------------#!
#!                          PATTERN FORMATS GLOSSARY                           #!
#!-----------------------------------------------------------------------------#!
#! %n - newline                                                                #!
#! %m - your log message                                                       #!
#! %p - message priority (FATAL, ERROR, WARN, INFO, DEBUG or custom)           #!
#! %r - millisecs since program started running                                #!
#! %% - percent sign in output                                                 #!
#!                                                                             #!
#!-----------------------SOME MORE CLUTTER IN YOUR LOG-------------------------#!
#! %c - name of your logger, %c{2} will outputs last two components            #!
#! %t - name of current thread                                                 #!
#! %x - Nested Diagnostic Context (NDC) (you supply it#!)                      #!
#!                                                                             #!
#!-------------------------SLOW PERFORMANCE FORMATS----------------------------#!
#! %d - date and time, also %d{ISO8601}, %d{DATE}, %d{ABSOLUTE},               #!
#!        %d{HH:mm:ss,SSS}, %d{dd MMM yyyy HH:mm:ss,SSS} and so on             #!
#! %l - Shortcut for %F%L%C%M                                                  #!
#! %F - Java source file name                                                  #!
#! %L - Java source line number                                                #!
#! %C - Java class name, %C{1} will output the last one component              #!
#! %M - Java method name                                                       #!
#!                                                                             #!
#!------------------------------FORMAT MODIFIERS-------------------------------#!
#! %-any_letter_above - Left-justify in min. width (default is right-justify)  #!
#! %20any_letter_above - 20 char. min. width (pad with spaces if reqd.)        #!
#! %.30any_letter_above - 30 char. max. width (truncate beginning if reqd.)    #!
#! %-10.10r - Example.  Left-justify time elapsed within 10-wide field.        #!
#!              Truncate from beginning if wider than 10 characters.           #!
#!-----------------------------------------------------------------------------#!


#!-----------------------------------------------------------------------------#!
#!                             OPTIONS GLOSSARY                                #!
#!-----------------------------------------------------------------------------#!
#!-------------------------OVERALL OPTIONS FOR log4j---------------------------#!
#! Specify as command line option: -Dlog4j.defaultInitOverride=false
#! Specify as command line option: -Dlog4j.configuration=app_config.properties
#!#log4j.debug=true
#!#log4j.disable=INFO
#!#log4j.disableOverride=false
#!#log4j.additivity.your.logger.name=false
#!
#!----------------------------NullAppender OPTIONS-----------------------------#!
#!#log4j.appender.ConsoleLogger.Threshold=INFO
#!
#!---------------------------ConsoleAppender OPTIONS---------------------------#!
#!#log4j.appender.ConsoleLogger.Threshold=INFO
#!#log4j.appender.ConsoleLogger.ImmediateFlush=true
#!#log4j.appender.ConsoleLogger.Target=System.err
#!
#!-----------------------------FileAppender OPTIONS----------------------------#!
#!#log4j.appender.FileLogger.Threshold=INFO
#!#log4j.appender.FileLogger.ImmediateFlush=true
#!#log4j.appender.FileLogger.File=mylog.txt
#!#log4j.appender.FileLogger.Append=false
#!
#!-------------------------RollingFileAppender OPTIONS-------------------------#!
#!#log4j.appender.FileLogger.Threshold=INFO
#!#log4j.appender.FileLogger.ImmediateFlush=true
#!#log4j.appender.FileLogger.File=mylog.txt
#!#log4j.appender.FileLogger.Append=false
#!#log4j.appender.FileLogger.MaxFileSize=100KB
#!#log4j.appender.FileLogger.MaxBackupIndex=2
#!
#!-----------------------DailyRollingFileAppender OPTIONS----------------------#!
#!#log4j.appender.FileLogger.Threshold=INFO
#!#log4j.appender.FileLogger.ImmediateFlush=true
#!#log4j.appender.FileLogger.File=mylog.txt
#!#log4j.appender.FileLogger.Append=false
#!#log4j.appender.FileLogger.DatePattern='.'yyyy-ww
#!
#!-----------------------------SimpleLayout OPTIONS----------------------------#!
#!**None**
#!
#!-------------TTCCLayout OPTIONS (PatternLayout is more flexible)-------------#!
#!#log4j.appender.ConsoleLogger.layout.DateFormat=ISO8601
#!#log4j.appender.ConsoleLogger.layout.TimeZoneID=GMT-8:00
#!#log4j.appender.ConsoleLogger.layout.LoggerPrefixing=false
#!#log4j.appender.ConsoleLogger.layout.ThreadPrinting=false
#!#log4j.appender.ConsoleLogger.layout.ContextPrinting=false
#!
#!-----------------------------PatternLayout OPTIONS---------------------------#!
#!#log4j.appender.ConsoleLogger.layout.ConversionPattern=%m%n
#!
#!-------------------------------HTMLLayout OPTIONS----------------------------#!
#!#log4j.appender.JDBCFileLogger.layout.LocationInfo=true
#!#log4j.appender.JDBCFileLogger.layout.Title=My app title
#!
#!--------------------------------XMLLayout OPTIONS----------------------------#!
#!#log4j.appender.JDBCFileLogger.layout.LocationInfo=true
#!-----------------------------------------------------------------------------#!

#!-----------------------------------------------------------------------------#!
#! WE will use WARN level for JDBCFileLogger
#!-----------------------------------------------------------------------------#!
log4j.appender.JDBCFileLogger.Threshold=WARN


#!-----------------------------------------------------------------------------#!
#!The different types of loggers available for Process Request Engine          #!
#!-----------------------------------------------------------------------------#!
#!Individual Loggers can be enabled or disabled.
#!All have ALL and OFF as two options.
#!The options within square brackets can be alternatively used. The syntax     #!
#!includes only one value and the square brackets and the values within must be#!
#!removed while enabling the option.
log4j.logger.org=FATAL
log4j.logger.PoolManager=ALL
#log4j.logger.JDBC=
#log4j.logger.JDBC.<poolname>=
#log4j.logger.JDBC.<poolname>.SelfCheck=
